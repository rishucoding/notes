
1.  git has an incredible branching system for non-linear development

2. Git thinks of its data more like a series of snapshots of a miniature filesystem.

3. git has three main states that your files can reside in: committed, modified, and staged: ![ ](/home/rishu/Documents/notes/git/areas.png  "the three states")
> 1. Committed means that the data is safely stored in your local database.
>2. Modified means that you have changed the file but have not committed it to your database yet.
>3. Staged means that you have marked a modified file in its current version to go into your next commit snapshot.

4. >1. The Git directory is where Git stores the metadata and object database for your project.
>2. The working directory is a single checkout of one version of the project. These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.
>3. The staging area is a file, generally contained in your Git directory, that stores information about what will go into your next commit.

5. Install git via: 
```sh
$ sudo apt-get install git-all
```

To setup a default editor for git: 
```sh
$ git config --global core.editor vim
```
___
###2.1 Git basics

1. One should know : be able to configure and initialize a repository, begin and stop tracking files, and stage and commit changes. We’ll also show you how to set up Git to ignore certain files and file patterns, how to undo mistakes quickly and easily, how to browse the history of your project and view changes between commits, and how to push and pull from remote repositories.

2. To start controlling an existing directory with git: 
Go to the desired directory and do "$ git init"
 

3. The basic commands used always are: 
```bash
$ git add abc.c
$ git add xyz.txt
$ git commit -m 'adding functions and data'
```
 To get a copy of an existing git repo: 
```sh
$ git clone https://github.com/libgit2/libgit2
```
>1. creates a directory named libgit2
>2. initializes a .git directory inside it
>3. pulls down all the data for that repository
>4. checks out a working copy of the latest version

 To clone a repo with a different name, you can specify the new direcotry name as an additional arguement:
```sh
$ git clone https://github.com/libgit2/libgit2 mylibgit
``` 

### 2.2 Recording Changes to the Repository

1. Typically, you’ll want to start making changes and committing snapshots of those changes into your repository each time the project reaches a state you want to record.

2.  each file in your working directory can be in one of two states: tracked or untracked.
Untracked basically means that Git sees a file you didn’t have in the previous snapshot (commit)
![ ](/home/rishu/Documents/notes/git/lifecycle.png  "Lifecycle")

3. Checking the Status of Your Files
```sh
$ git status
$ git status -s 
$ git status --short
```
(To get a short status)

4. git add simply means “add precisely this content to the next commit”

5. Ignoring files: 


The rules for the patterns you can put in the .gitignore file are as follows:

    Blank lines or lines starting with # are ignored.

    Standard glob patterns work, and will be applied recursively throughout the entire working tree.

    You can start patterns with a forward slash (/) to avoid recursivity.

    You can end patterns with a forward slash (/) to specify a directory.

    You can negate a pattern by starting it with an exclamation point (!).

6. To see what you’ve changed but not yet staged, type 
```sh
git diff
```
That command compares what is in your working directory with what is in your staging area. The result tells you the changes you’ve made that you haven’t yet staged.

7. If you want to see what you’ve staged that will go into your next commit, you can use 
```sh
git diff --staged
```
This command compares your staged changes to your last commit

8. 
```sh
$ git commit -m "Story 182: Fix benchmarks for speed"
[master 463dc4f] Story 182: Fix benchmarks for speed
 2 files changed, 2 insertions(+)
 create mode 100644 README
```

Here, console log shows: which branch you commited to (master here),what SHA-1 checksum the commit has (463dc4f), how many files were changed, and statistics about lines added and removed in the commit.

9. **Skipping the staging area:**
Adding the -a option to the git commit command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the git add part:
```sh
git commit -a -m 'added new benchmarks'
```

10. **Removing files**
```sh
$ rm PROJECTS.md
$ git status
$ git rm PROJECTS.md
$ git status
```

11. **Moving a file**
```sh
$ mv README.md README
$ git rm README.md
$ git add README
```


### 2.3 Viewing the Commit History
```sh
$ git log
```
>this command lists each commit with its SHA-1 checksum, the author’s name and email, the date written, and the commit message.

```sh
$ git log -p -2
#or
$ git log --patch -2
```
>This shows the difference (the patch output) introduced in each commit.

>This is very helpful for code review or to quickly browse what happened during a series of commits that a collaborator has added.

```sh
$ git log --stat
```
>  prints below each commit entry a list of modified files, how many files were changed, and how many lines in those files were added and removed. It also puts a summary of the information at the end.


 ```sh
 $ git log --pretty=oneline
 ```
 > he oneline option prints each commit on a single line, which is useful if you’re looking at a lot of commits. 

**NOte:**
>difference between author and committer? The author is the person who originally wrote the work, whereas the committer is the person who last applied the work. So, if you send in a patch to a project and one of the core members applies the patch, both of you get credit — you as the author, and the core member as the committer.

### 2.4 Undoing Things

```sh
$ git commit --amend
```
>One of the common undos takes place when you commit too early and possibly forget to add some files, or you mess up your commit message. If you want to redo that commit, make the additional changes you forgot, stage them, and commit again using the --amend option

> This command let's you edit the commit message, stage the necessary files

```sh
$ git commit -m "initial commit"
$ git add forgotten_file
$ git commit --amend
```

**Unstaging a staged file:**
```sh
$ git add *
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
    modified:   CONTRIBUTING.md
$ git reset HEAD CONTRIBUTING.md

```

**Unmodifying a modified file**

```sh
$ git checkout -- CONTRIBUTING.md
$git status
```
>What if you realize that you don’t want to keep your changes to the CONTRIBUTING.md file? 
> git checkout -- <file> is used to discard the changes in working directory. 

### 2.5 Working with remotes

1. Remote repositories are versions of your project that are hosted on the Internet or network somewhere.

2. Collaborating with others involves managing these remote repositories and pushing and pulling data to and from them when you need to share work. 

```sh
$ git remote
$ git remote -v
```
> To see the remote servers configured! 
> -v shows you the URLs that Git has stored for the shortname to be used when reading and writing to that remote:


**Adding remote repositories:**

```sh
$ git remote
$ git remote add tracking_notes https://github.com/rishucoding/notes
$ git remote -v
$ git fetch pb
```
>  To add a new remote Git repository as a shortname you can reference easily, run git remote add <shortname> <url>
> fetch all the information from pb that we don't have in our repo. 

**Fetching and pulling from remotes: **
```sh
$ git fetch <remote>
```
>The command goes out to that remote project and pulls down all the data from that remote project that you don’t have yet. After you do this, you should have references to all the branches from that remote, which you can merge in or inspect at any time.

>  It’s important to note that the git fetch command only downloads the data to your local repository — it doesn’t automatically merge it with any of your work or modify what you’re currently working on. You have to merge it manually into your work when you’re ready.

**NOTE**: == $ git pull ==  command will automatically fetch and then merge that remote branch into your current branch.

**Pushing to your remotes**
> When you have your project at a point that you want to share, you have to push it upstream.

```sh
$ git push origin master
```
> The command for this is simple: git push <remote> <branch>. 
> This command works only if you cloned from a server to which you have write access and if nobody has pushed in the meantime.

**Inspecting a remote**
> If you want to see more information about a particular remote, you can use the git remote show <remote> command

```sh
$ git remote show origin
```

**Renaming and removing remotes**
```sh
$ git remote rename pb paul
$ git remote
origin
paul
$ git remote remove paul
$ git remote
origin

````

### Git Branches

```sh
$ git branch
```
> lists all the branches. 

```sh
$ git branch new_one
$ git branch
$ git checkout new_one
```
> creates a new branch "new_one"
> make the branch active









